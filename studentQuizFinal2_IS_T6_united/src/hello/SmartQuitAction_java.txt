package hello;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

import java.util.*;
import java.sql.*;
import java.io.*;
import javax.sql.*;

import util.*;

public final class SmartQuitAction extends Action {

    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an <code>ActionForward</code> instance describing where and how
     * control should be forwarded, or <code>null</code> if the response has
     * already been completed.
     */
    public ActionForward execute(ActionMapping mapping,
                                 ActionForm form,
                                 HttpServletRequest request,
                                 HttpServletResponse response)
    throws Exception {

        // These "messages" come from the ApplicationResources.properties file
        MessageResources messages = getResources(request);
        HttpSession session = request.getSession(true);

        /*
         * Validate the request parameters specified by the user
         * Note: Basic field validation done in HelloForm.java
         *       Business logic validation done in HelloAction.java
         */
        ActionMessages errors = new ActionMessages();        
        
        /*
        String userName = (String)((HelloForm) form).getUserName();
        String badUserName = "Monster";
        if (userName.equalsIgnoreCase(badUserName)) {
           errors.add("username", new ActionMessage("hello.dont.talk.to.monster", badUserName ));
           saveErrors(request, errors);
           return (new ActionForward(mapping.getInput()));
        }
        */
        /*
         * Having received and validated the data submitted
         * from the View, we now update the model
         */       
       
        /*
        if (pb == null) {
           return (mapping.findForward("toError"));           
        }        
        if (pb == null) {
           pb = new ProblemBean();
        }
        */

        PersonBean pb2 = null;
        pb2 = new PersonBean();   
        
        String userName = (String)((SmartQuitForm) form).getUserName();
        String passWord = (String)((SmartQuitForm) form).getPassWord();
        String trueName = (String)((SmartQuitForm) form).getTrueName();
        pb2.setUserName(userName);
        pb2.setPassWord(passWord); 
        pb2.setTrueName(trueName);       

        String answeredProblems = (String)((SmartQuitForm) form).getAnsweredProblems();
        String correctAnswers = (String)((SmartQuitForm) form).getCorrectAnswers();
        int intAnsweredProblems = Integer.parseInt(answeredProblems);
        int intCorrectAnswers = Integer.parseInt(correctAnswers);                   
        pb2.setAnsweredProblems(intAnsweredProblems);
        pb2.setCorrectAnswers(intCorrectAnswers); 

        String totalScore = (String)((SmartQuitForm) form).getTotalScore();
        String correctAnswers_low = (String)((SmartQuitForm) form).getCorrectAnswers_low();
        String answeredProblems_low = (String)((SmartQuitForm) form).getAnsweredProblems_low();
        int intTotalScore = Integer.parseInt(totalScore);
        int intCorrectAnswers_low = Integer.parseInt(correctAnswers_low);
        int intAnsweredProblems_low = Integer.parseInt(answeredProblems_low);                      
        pb2.setTotalScore(intTotalScore);
        pb2.setCorrectAnswers_low(intCorrectAnswers_low);
        pb2.setAnsweredProblems_low(intAnsweredProblems_low);   

        String correctAnswers_middle = (String)((SmartQuitForm) form).getCorrectAnswers_middle();
        String answeredProblems_middle = (String)((SmartQuitForm) form).getAnsweredProblems_middle();        
        int intCorrectAnswers_middle = Integer.parseInt(correctAnswers_middle);
        int intAnsweredProblems_middle = Integer.parseInt(answeredProblems_middle);       
        pb2.setCorrectAnswers_middle(intCorrectAnswers_middle);
        pb2.setAnsweredProblems_middle(intAnsweredProblems_middle); 

        String correctAnswers_high = (String)((SmartQuitForm) form).getCorrectAnswers_high();
        String answeredProblems_high = (String)((SmartQuitForm) form).getAnsweredProblems_high();        
        int intCorrectAnswers_high = Integer.parseInt(correctAnswers_high);
        int intAnsweredProblems_high = Integer.parseInt(answeredProblems_high);       
        pb2.setCorrectAnswers_high(intCorrectAnswers_high);
        pb2.setAnsweredProblems_high(intAnsweredProblems_high);  
 
        String times = (String)((SmartQuitForm) form).getTimes();
        pb2.setTimes(times);     

        session.setAttribute( Constants.PERSON_KEY, pb2); 
        request.setAttribute( Constants.PERSON_KEY, pb2);
       
        boolean isDone_1 = true;      
        boolean isDone_2 = false;        
        
        javax.sql.DataSource dataSource = null;
        java.sql.Connection myConnection = null;  
        PreparedStatement stmt = null; 
        Statement s = null;
        ResultSet rs = null; 
        String answeredHashSetStr = (String)((SmartQuitForm) form).getAnsweredHashSet();
        HashSet hs = StringSetTransfer.stringToSet(answeredHashSetStr);
        hs.remove(new Integer(0));
        
        try {
           dataSource = getDataSource(request);
           myConnection = dataSource.getConnection();           
           //Class.forName("org.hsqldb.jdbcDriver");
           //myConnection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/xdb", "SA", "");   

           stmt = myConnection.prepareStatement("update students set score=? where username=?");  
           stmt.clearParameters();
           stmt.setInt(1, intTotalScore); 
           stmt.setString(2, userName);
           stmt.executeUpdate();
           getServlet().log("score is " + intTotalScore); 
           
           isDone_2 = true;
           System.out.println("isDone_2 is true");   
           getServlet().log("isDone_2 is true");     
        } catch (SQLException sqle) {
           getServlet().log("Connection.process", sqle);
        } finally {
           //enclose this in a finally block to make
           //sure the connection is closed
           try {
              stmt.close();
              myConnection.close();
           } catch (SQLException e) {
             getServlet().log("Connection.close", e);
           }
        }

        // Remove the Form Bean - don't need to carry values forward
        request.removeAttribute(mapping.getAttribute());        
        
        HashSet oldHS = new HashSet();
        try {
           dataSource = getDataSource(request);
           myConnection = dataSource.getConnection();           
           //Class.forName("org.hsqldb.jdbcDriver");
           //myConnection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/xdb", "SA", "");
           /*
           s = myConnection.createStatement();
           s.executeUpdate("delete from usedQuestions2");
           */
           s = myConnection.createStatement();
           rs = s.executeQuery("select id from usedQuestions2");                
           while (rs.next()){
              int usedId = rs.getInt("id");
              oldHS.add(new Integer(usedId));
           }
           isDone_1 = true; 
           System.out.println("isDone_1 is true");
           getServlet().log("isDone_1 is true from SmartQuitAction"); 
           
           hs.removeAll(oldHS);
           Object[] hsArray = hs.toArray();
           for (int i=0; i<hsArray.length; i++) {
              int usedId = ((Integer)hsArray[i]).intValue();
              getServlet().log("usedId is " + usedId); 
              String type = null;
              //s = myConnection.createStatement();
              rs = s.executeQuery("select type from questions2 where id=" + usedId);                
              while (rs.next()){
                 type = rs.getString("type");                 
              }
              getServlet().log("type is " + type); 

              stmt = myConnection.prepareStatement("insert into usedQuestions2(id, type, times) values(?,?,?)");  
              stmt.clearParameters();
              stmt.setInt(1, usedId); 
              stmt.setString(2, type); 
              stmt.setString(3, times); 
              stmt.execute();
              getServlet().log("insert is success from SmartQuitActioin " + usedId + " : " + type);               
           }
           isDone_2 = true;
           System.out.println("isDone_2 is true");   
           getServlet().log("isDone_2 is true from SmartQuitAction");     
        } catch (SQLException sqle) {
           getServlet().log("Connection.process", sqle);
        } finally {
           //enclose this in a finally block to make
           //sure the connection is closed
           try {
              rs.close();
              s.close();
              stmt.close();
              myConnection.close();
           } catch (SQLException e) {
             getServlet().log("Connection.close", e);
           }
        }       

        /*
         * If there was a choice of View components that depended on the model
         * (or some other) status, we'd make the decision here as to which
         * to display. In this case, there is only one View component.
         *
         * We pass data to the View components by setting them as attributes
         * in the page, request, session or servlet context. In this case, the
         * most appropriate scoping is the "request" context since the data
         * will not be neaded after the View is generated.
         *
         * Constants.PERSON_KEY provides a key accessible by both the
         * Controller component (i.e. this class) and the View component
         * (i.e. the jsp file we forward to).
         */

        // Forward control to the specified success URI
        if (isDone_1 == false || isDone_2 == false)
            return (mapping.findForward("toError"));     
        else    
        return (mapping.findForward("SmartQuitRegister"));        
    }
}
