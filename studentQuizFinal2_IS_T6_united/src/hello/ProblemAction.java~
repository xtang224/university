package hello;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

import java.util.*;
import java.sql.*;
import java.io.*;
import javax.sql.*;

import util.*;

public final class ProblemAction extends Action {

    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an <code>ActionForward</code> instance describing where and how
     * control should be forwarded, or <code>null</code> if the response has
     * already been completed.
     */
    public ActionForward execute(ActionMapping mapping,
                                 ActionForm form,
                                 HttpServletRequest request,
                                 HttpServletResponse response)
    throws Exception {

        // These "messages" come from the ApplicationResources.properties file
        MessageResources messages = getResources(request);

        /*
         * Validate the request parameters specified by the user
         * Note: Basic field validation done in HelloForm.java
         *       Business logic validation done in HelloAction.java
         */
        ActionMessages errors = new ActionMessages();
        HttpSession session = request.getSession(true);
        ProblemBean pb = null;
        ChoiceBean cb = null;
        String first = null;
        first = (String)request.getParameter("first"); 

        PersonBean pb2 = null;
        pb2 = new PersonBean();
        String userName = (String)((ProblemForm) form).getUserName();
        String passWord = (String)((ProblemForm) form).getPassWord();
        String trueName = (String)((ProblemForm) form).getTrueName();
        pb2.setUserName(userName);
        pb2.setPassWord(passWord); 
        pb2.setTrueName(trueName); 

        
        javax.sql.DataSource dataSource = null;
        java.sql.Connection myConnection = null;
        Statement s = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        pb = new ProblemBean(); 
        cb = new ChoiceBean(); 
        HashSet hs = null; 
        HashSet hs_tf = null;
        if (first.equals("true")){
            hs = new HashSet(); 
            hs.add(new Integer(0));
            hs_tf = new HashSet();
            hs_tf.add(new Integer(0));
            try{
                //we will try to initiate the usedQuestions first, then generate the random question id 
               dataSource = getDataSource(request);
               myConnection = dataSource.getConnection();
               //Class.forName("org.hsqldb.jdbcDriver");
               //myConnection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/xdb", "SA", "");
               s = myConnection.createStatement();
               rs = s.executeQuery("select id from usedQuestions where studentNo='" + userName + "'");
               while (rs.next()){
                  int usedId = rs.getInt("id");
                  hs.add(new Integer(usedId));
               }

               rs = s.executeQuery("select id from usedChoices where studentNo='" + userName + "'");                
               while (rs.next()){
                  int usedId = rs.getInt("id");
                  hs_tf.add(new Integer(usedId));
               }
            }catch (SQLException sqle) {
               getServlet().log("Connection.process", sqle);
            } finally {           
                try {
                    if (rs != null) rs.close();
                    if (s != null) s.close();
                    if (myConnection != null) myConnection.close();
                } catch (SQLException e) {
                    getServlet().log("Connection.close", e);
                }
            }
        }else{
            String answeredHashSetStr = (String)((ProblemForm) form).getAnsweredHashSet();
            hs = StringSetTransfer.stringToSet(answeredHashSetStr);
            String answeredHashSetStr_tf = (String)((ProblemForm) form).getAnsweredHashSet_tf();
            hs_tf = StringSetTransfer.stringToSet(answeredHashSetStr_tf);
        }

        try {
           dataSource = getDataSource(request);
           myConnection = dataSource.getConnection();
           //Class.forName("org.hsqldb.jdbcDriver");
           //myConnection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/xdb", "SA", "");
           // do what you wish with myConnection
          
           s = myConnection.createStatement();
           rs = s.executeQuery("select id from questions");         
           int numberId = 0;
           while (rs.next()){
              int usedId = rs.getInt("id");
              numberId ++;                 
              //getServlet().log("score part is reached");
           }  
                    
           int id = 0;
           while(!hs.add(new Integer(id))){
              id = (int)(Math.random() * numberId + 0.5);
           }
           
           hs.add(new Integer(id));
           stmt = myConnection.prepareStatement("select * from questions where id=?");
           stmt.clearParameters();
           stmt.setInt(1, id);
           rs = stmt.executeQuery();
           while (rs.next()){
              pb.setId(rs.getInt("id"));
              pb.setStatement(rs.getString("statement"));
              pb.setChoiceA(rs.getString("choiceA"));
              pb.setChoiceB(rs.getString("choiceB"));
              pb.setChoiceC(rs.getString("choiceC"));
              pb.setChoiceD(rs.getString("choiceD"));
              pb.setCorrectChoice(rs.getString("correctChoice")); 
              pb.setSolution(rs.getString("solution"));             
           }
        } catch (SQLException sqle) {
           getServlet().log("Connection.process", sqle);
        } finally {
           //enclose this in a finally block to make
           //sure the connection is closed
           try {
              rs.close();
              s.close();
              stmt.close();
              myConnection.close();
           } catch (SQLException e) {
             getServlet().log("Connection.close", e);
         }
       }
        
        pb.saveToPersistentStore();

        /*
         * If there was a choice of View components that depended on the model
         * (or some other) status, we'd make the decision here as to which
         * to display. In this case, there is only one View component.
         *
         * We pass data to the View components by setting them as attributes
         * in the page, request, session or servlet context. In this case, the
         * most appropriate scoping is the "request" context since the data
         * will not be neaded after the View is generated.
         *
         * Constants.PERSON_KEY provides a key accessible by both the
         * Controller component (i.e. this class) and the View component
         * (i.e. the jsp file we forward to).
         */

        // Remove the Form Bean - don't need to carry values forward
        request.removeAttribute(mapping.getAttribute());

        request.setAttribute( Constants.PROBLEM_KEY, pb);        
        session.setAttribute( Constants.PROBLEM_KEY, pb);
        session.setAttribute( Constants.HASHSET_KEY, StringSetTransfer.setToString(hs));        
        
        if (first.equals("true")){           
           pb2.setAnsweredProblems(0);
           pb2.setCorrectAnswers(0);           
        }else {
           String answeredProblems = (String)((ProblemForm) form).getAnsweredProblems();
           String correctAnswers = (String)((ProblemForm) form).getCorrectAnswers();
           int intAnsweredProblems = Integer.parseInt(answeredProblems);
           int intCorrectAnswers = Integer.parseInt(correctAnswers);
           
           pb2.setAnsweredProblems(intAnsweredProblems);
           pb2.setCorrectAnswers(intCorrectAnswers); 
        }
       
        session.setAttribute( Constants.PERSON_KEY, pb2); 
        request.setAttribute( Constants.PERSON_KEY, pb2);              

        // Forward control to the specified success URI
        return (mapping.findForward("ShowProblem"));        
    }
}
